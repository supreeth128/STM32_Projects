/*************************************************************************************
 *
 *	Overview
 *	--------
 *	Macros, constants and data structures for implementing GPIO
 *
 *	Includes STM32F4XX
 *
 *
 *	Developed by
 *	------------
 *	Author	: Supreeth Anil
 *	Date	: 11-May-2019
 *
 *
 *  ==================================================================================
 *
 *  MIT License
 *
 *	Copyright (c) 2019 Supreeth Anil
 *
 *	Permission is hereby granted, free of charge, to any person obtaining a copy
 *	of this software and associated documentation files (the "Software"), to deal
 *	in the Software without restriction, including without limitation the rights
 *	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *	copies of the Software, and to permit persons to whom the Software is
 *	furnished to do so, subject to the following conditions:
 *
 *	The above copyright notice and this permission notice shall be included in all
 *	copies or substantial portions of the Software.
 *
 *	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *	SOFTWARE.
 *
 *	==================================================================================
 *
 *
 *
 ************************************************************************************/

#ifndef __GPIO_DRIVER_H__
#define __GPIO_DRIVER_H__

#include<stdbool.h>
#include "stm32f407xx.h"


/* ---------------------------- GPIO Init Definition ------------------------------ */

typedef struct {

	uint8_t GPIO_Pin_Number;					/*!< Pin number ranges from 0-15 >*/
	uint8_t GPIO_Pin_Mode;						/*!< Supports Input, Output, Alternate Function and Analog >*/
	uint8_t GPIO_Pin_Output_Type;				/*!< Supported modes are Push-Pull and Open-Drain >*/
	uint8_t GPIO_Pin_Speed;						/*!< Supports Low, Medium, High and Very High Speeds >*/
	uint8_t GPIO_Pin_PUPD_Config;				/*!< Supports No PUPD, Only PU and Only PD >*/
	uint8_t GPIO_Pin_Alt_Func;					/*!< Each Pin supports up to 16 alternate functions >*/

} GPIO_Pin_Config_TypeDef;


/* ---------------------------- GPIO Handle Definition ---------------------------- */

typedef struct {

	GPIO_TypeDef *pGPIOx;						/*!< Holds the base address of the GPIO port to which the pin belongs >*/
	GPIO_Pin_Config_TypeDef *GPIO_Pin_Congig;	/*!< Holds the GPIO Pin configuration settings >*/

} GPIO_Handle_TypeDef;


/*************************************************************************************
 *
 * 						APIs supported by GPIO drivers
 * 		For more information about the APIs check the function definition
 *
 ************************************************************************************/


/* GPIO Clock Handle API */

void GPIO_Clock_Enable(GPIO_TypeDef *pGPIOx);
void GPIO_Clock_Disable(GPIO_TypeDef *pGPIOx);

/* GPIO Initializing API and API for resetting GPIO Port Settings */

void GPIO_Init(GPIO_Handle_TypeDef *pGPIOHandle);
void GPIO_De_Init(GPIO_TypeDef *pGPIOx);


/* GPIO Data Read and Write APIs */

bool GPIO_Pin_Read(GPIO_TypeDef *pGPIOx, uint8_t pin);
uint16_t GPIO_Port_Read(GPIO_TypeDef *pGPIOx);
void GPIO_Pin_Write(GPIO_TypeDef *pGPIOx, uint8_t pin, bool value);
void GPIO_Port_Write(GPIO_TypeDef *pGPIOx, uint16_t value);
void GPIO_Pin_Toggle(GPIO_TypeDef *pGPIOx, uint8_t pin);


/* GPIO IRQ Handling APIs */

void GPIO_IRQ_Init(void);
void GPIO_IRQ_Handler(void);




#endif				/* __GPIO_DRIVER_H__ */













